// ALGORITHM DESIGN : Gayle-Shapley Algorithm
/*
   1. Initially, everyone is unmarried.
   2. if unmarried man m chooses w who ranks highest in his preference list and proposes to her. 
      if the woman w is free, she temporarily pairs with m as she might not a better man.
      
   3. An arbitary free man m chooses the highest ranked woman w to whom he has not proopsed yet.
      If the woman w is free, then w amd m becomes engaged. 
      If the woman is already engaged to some other man m', she compares the rank of both and choose the higher ranking one. 
  
   4.  The algorithm terminates when none is free. 

*/

//Pseudo CODE:

/*
algorithm stable_matching is
    Initialize all m ∈ M and w ∈ W to free
    while ∃ free man m who still has a woman w to propose to do
        w := first woman on m's list to whom m has not yet proposed
        if w is free then
            (m, w) become engaged
        else some pair (m', w) already exists
            if w prefers m to m' then
                m' becomes free
                (m, w) become engaged
            else
                (m', w) remain engaged
            end if
        end if
    repeat
*/

//CODE: 

#include<iostream>
#include<vector>
#include<stack>
#include<unordered_map>
#include<unordered_set>

using namespace std;

int compare(int existing, int newman, unordered_map<int, int> list)
{

    if (list[existing] < list[newman])
    {
        return existing;
    }

    return newman;

}

unordered_map<int, int>gale_shaple(unordered_map<int, stack<int>>& malepref, unordered_map<int, unordered_map<int,int>>& femalepref)
{
    unordered_set<int> menmap;
    unordered_map<int, bool> femalemap;
    unordered_map<int, int> match;

    for (auto j = femalepref.begin(); j != femalepref.end(); j++)
    {
        femalemap[j->first] = false;
    }

    while (malepref.empty()==false)
    {


        for (auto i = malepref.begin(); i != malepref.end(); i++)
        {
            if (i->second.empty())
            {
                //cout << "empty" << i->first << endl;
                menmap.erase(i->first);
                malepref.erase(i->first);
                break;
            }
            int topfemale = i->second.top();
            //cout << i->first << " ++ " << topfemale << " ++" << endl;
            if (!femalemap[topfemale])
            {
                i->second.pop();
                match[topfemale] = i->first;
                femalemap[topfemale] = true;
            }
            else
            {

                match[topfemale] = compare(i->first, match[topfemale], femalepref[topfemale]);
                i->second.pop();

            }
        }
    }
    return match;

}

int main()

{
    //cout << "ENTER NO OF TESTCASES" << endl;
    int t;
    cin >> t;
    while (t--)
    {
       // cout << "Enter the number of man" << endl;
        int no_man;
        cin >> no_man;

        unordered_map<int,stack<int>> malepref;

        while (no_man--)
        {
         //   cout << "Enter male no:" << endl;
            int male_no;
            cin >> male_no;

           // cout << "Enter no of entry" << endl;
            int noofpref;
            cin >> noofpref;

            while (noofpref--)
            {
                int temp;
                cin >> temp;
                malepref[male_no].push(temp);

            }
        }
        //cout << "Enter no of Female" << endl;
        int no_female;
        cin >> no_female;

        unordered_map<int, unordered_map<int,int>> femalepref;

        while (no_female--)
        {
          //  cout << "The nth number of female" << endl;
            int female_no;
            cin >> female_no;
            //cout << "Enter the no of pref" << endl;
            int noompref;
            cin >> noompref;
            int i = 1;
            while (noompref--)
            {
                int temp;
                cin >> temp;
                femalepref[female_no][temp]=i;
                i++;

            }
        }
        auto ans = gale_shaple(malepref, femalepref);

        for (auto i = ans.begin(); i != ans.end(); i++)
        {
            cout << i->second << " " << i->first << endl;
        }
    }

}





